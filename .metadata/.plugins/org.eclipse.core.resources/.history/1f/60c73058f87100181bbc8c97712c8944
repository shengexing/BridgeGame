package impl;

import java.util.Random;
import entity.Card;

/**
 * 叫牌回合信息的类
 * @author Time
 *
 */
public class Poker {
	
	static Card[] pokerN = new Card[13];	// 北家的手牌
	static Card[] pokerE = new Card[13];	// 东家的手牌
	static Card[] pokerS = new Card[13];	// 南家的手牌
	static Card[] pokerW = new Card[13];	// 西家的手牌
	static Card[] pokerALL = new Card[52];	// 52张扑克牌
	
	
	/**
	 * Poker 的GET&SET方法
	 * @return
	 */
	public static Card[] getPokerN() {
		return pokerN;
	}

	public static void setPokerN(Card[] pokerN) {
		Poker.pokerN = pokerN;
	}

	public static Card[] getPokerE() {
		return pokerE;
	}

	public static void setPokerE(Card[] pokerE) {
		Poker.pokerE = pokerE;
	}

	public static Card[] getPokerS() {
		return pokerS;
	}

	public static void setPokerS(Card[] pokerS) {
		Poker.pokerS = pokerS;
	}

	public static Card[] getPokerW() {
		return pokerW;
	}

	public static void setPokerW(Card[] pokerW) {
		Poker.pokerW = pokerW;
	}

	public static Card[] getPokerALL() {
		return pokerALL;
	}

	public static void setPokerALL(Card[] pokerALL) {
		Poker.pokerALL = pokerALL;
	}

	/**
	 * ��ʼ��52���˿���
	 */
	static {
		for(int i = 0; i < 52; i++) {
			pokerALL[i] = new Card(i);
		}
	}
	
	/**
	 * ���ȫ������
	 */
	public static void printALLCards() {
		for(int i = 0; i < 52; i++) {
			System.out.print(pokerALL[i].toString() + "  ");
			if(i % 13 == 12) System.out.println();
		}
	}
	
	/**
	 * �����ҵ���
	 * @param position ��ҵ�λ�ã�0������1������2���ϡ�3����
	 */
	public static void printPlayerCards(int position) {
		/* ������ҵ�����*/
		if(position == 0) {
			System.out.print("���ҵ����ƣ�");
			for(int i = 0; i < 13; i++) System.out.print(pokerN[i].toString() + "  ");
			System.out.println();
		}
			
		/* ������ҵ�����*/
		if(position == 1) {
			System.out.print("���ҵ����ƣ�");
			for(int i = 0; i < 13; i++) System.out.print(pokerE[i].toString() + "  ");
			System.out.println();
		}
		
		/* ����ϼҵ�����*/
		if(position == 2) {
			System.out.print("�ϼҵ����ƣ�");
			for(int i = 0; i < 13; i++) System.out.print(pokerS[i].toString() + "  ");
			System.out.println();
		}
		
		/* ������ҵ�����*/
		if(position == 3) {
			System.out.print("���ҵ����ƣ�");
			for(int i = 0; i < 13; i++) System.out.print(pokerW[i].toString() + "  ");
			System.out.println();
		}
	}
	
	/**
	 * ϴ�Ƶķ���
	 * @param args
	 */
	public static void shuffle() {
        Random random = new Random();
        
        /* ϴ��*/
        for(int i = 0;i < 52;i++) {
            int index = random.nextInt(52);	// index Ϊ����ɵ�������
            int code_i = pokerALL[i].getCode(), code_index = pokerALL[index].getCode();
            pokerALL[i].setCode(code_index);
            pokerALL[index].setCode(code_i);
        }
	}
	
	/**
	 * ���Ƶķ���
	 * @param position ���Ƶ�˳��0���ȷ�����1���ȷ�����2���ȷ��ϡ�3���ȷ���
	 */
	public static void licensing(int position) {
		shuffle();	// ����֮ǰ��ϴ��
		
		/* �ȸ�ҷ���*/
		if(position == 0)
			for(int i = 0; i < 13; i++) {
				pokerN[i] = pokerALL[i * 4];
				pokerE[i] = pokerALL[i * 4 + 1];
				pokerS[i] = pokerALL[i * 4 + 2];
				pokerW[i] = pokerALL[i * 4 + 3];
			}
		
		/* �ȸ�ҷ���*/
		if(position == 1)
			for(int i = 0; i < 13; i++) {
				pokerE[i] = pokerALL[i * 4];
				pokerS[i] = pokerALL[i * 4 + 1];
				pokerW[i] = pokerALL[i * 4 + 2];
				pokerN[i] = pokerALL[i * 4 + 3];
			}
		
		/* �ȸ��ϼҷ���*/
		if(position == 2)
			for(int i = 0; i < 13; i++) {
				pokerS[i] = pokerALL[i * 4];
				pokerW[i] = pokerALL[i * 4 + 1];
				pokerN[i] = pokerALL[i * 4 + 2];
				pokerE[i] = pokerALL[i * 4 + 3];
			}
		
		/* �ȸ����ҷ���*/
		if(position == 3)
			for(int i = 0; i < 13; i++) {
				pokerW[i] = pokerALL[i * 4];
				pokerN[i] = pokerALL[i * 4 + 1];
				pokerE[i] = pokerALL[i * 4 + 2];
				pokerS[i] = pokerALL[i * 4 + 3];
			}
		
	}
	
	/**
	 * ������ҵ�����
	 * @param position ��ҵ�λ�ã�0������1������2���ϡ�3����
	 */
	public static void sortPlayerCards(int position) {
		/* ���?�ҵ���*/
		if(position == 0) sortCards(pokerN);
		
		/* ���?�ҵ���*/
		if(position == 1) sortCards(pokerE);
		
		/* �����ϼҵ���*/
		if(position == 2) sortCards(pokerS);
		
		/* �������ҵ���*/
		if(position == 3) sortCards(pokerW);
	}
	
	/**
	 * �����˿���
	 * @param cards ��Ҫ��������˿���
	 */
	public static void sortCards(Card[] cards) {
		int len = cards.length;
		
		/* �����˿���(ʹ��ð������)*/
		Card temp = null;
		for(int i = len - 1; i > 0; i--) {
			for(int j = 0; j < i; ++j) {
				int code_j = cards[j].getCode(), color_j = code_j % 4, number_j = code_j % 13;
				int code_j1 = cards[j + 1].getCode(), color_j1 = code_j1 % 4, number_j1 = code_j1 % 13;
				if(color_j1 < color_j) {temp = cards[j]; cards[j] = cards[j + 1]; cards[j + 1] = temp;}
				if(color_j1 == color_j && number_j1 > number_j) {temp = cards[j]; cards[j] = cards[j + 1]; cards[j + 1] = temp;}
			}
		}
	}

	/**
	 * ���ڲ��Ե�������
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("52����ʼ�˿��ƣ�");
		Poker.printALLCards();
		Poker.licensing(0);	// �ȸ�ҷ���
		System.out.println("ϴ�ƺ��52���˿��ƣ�");
		Poker.printALLCards();
		System.out.println("���ƵĽ��");
		for(int i = 0; i < 4; i++) Poker.printPlayerCards(i);
		System.out.println("����������ƺ�Ľ��");
		for(int i = 0; i < 4; i++) { Poker.sortPlayerCards(i); Poker.printPlayerCards(i);}
	}

}
